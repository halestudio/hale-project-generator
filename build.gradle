buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.standardout:gradle-eclipseconfig:1.1.0'
  }
}

plugins {
  id 'groovy'
  id 'maven'
//  id "org.standardout.versioneye" version "1.3.0"
}

apply plugin: 'org.standardout.eclipseconfig'

repositories {
  // these need to before jcenter/MavenCentral for retrieving JAI
  maven {
    url 'https://artifactory.wetransform.to/artifactory/ext-release-local'
  }
  
  jcenter()
  maven { // wetransform release repository (HALE releases and Eclipse dependencies)
    url 'https://artifactory.wetransform.to/artifactory/libs-release-local'
  }
  maven { // wetransform snapshot repository (HALE snapshots)
    url 'https://artifactory.wetransform.to/artifactory/libs-snapshot-local'
  }
  maven { // Geotools
    url 'http://download.osgeo.org/webdav/geotools/'
  }
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

group = 'to.wetransform'
version = '2.0.0-SNAPSHOT'

project.ext {
  haleVersion = '3.5.0'
}

dependencies {
  compile 'org.slf4j:slf4j-api:1.7.12'

  // core
  compile 'eu.esdihumboldt.unpuzzled:org.eclipse.equinox.nonosgi.registry:1.0.0'
  compile "eu.esdihumboldt.hale:eu.esdihumboldt.hale.common.core:$haleVersion"
  
  // schema
  compile "eu.esdihumboldt.hale:eu.esdihumboldt.hale.common.schema:$haleVersion"

  // alignment
  compile "eu.esdihumboldt.hale:eu.esdihumboldt.hale.common.align:$haleVersion"
	
  // resources
  /*
  compile(group: 'eu.esdihumboldt.hale', name: 'eu.esdihumboldt.util.resource', version: haleVersion)
  compile(group: 'eu.esdihumboldt.hale', name: 'eu.esdihumboldt.util.resource.schemas.opengis.net', version: '2015.10.27')
  compile(group: 'eu.esdihumboldt.hale', name: 'eu.esdihumboldt.util.resource.schemas.inspire', version: '2015.10.27')
	*/
	
  // testing
  testCompile 'junit:junit:4.12'

  // logging
  testRuntime 'ch.qos.logback:logback-core:1.1.6'
  testRuntime 'ch.qos.logback:logback-classic:1.1.6'
}

//tasks.check.dependsOn('versionEyeSecurityAndLicenseCheck')

/*
 * Packaging and publishing
 */

// package groovydoc into a jar file
task packageJavadoc(type: Jar, dependsOn: 'groovydoc') {
  from groovydoc.destinationDir
  classifier = 'javadoc'
}

// groovydoc task work-around
configurations {
  jansi.extendsFrom(runtime)
}
groovydoc {
  groovyClasspath = project.configurations.jansi
}
dependencies {
  jansi 'org.fusesource.jansi:jansi:1.11'
}

// package source into a jar file
task packageSources(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

// define artifacts for upload
artifacts {
  archives jar
  archives packageJavadoc
  archives packageSources
}

uploadArchives {
  repositories {
    mavenDeployer {
      
      // upload to wetransform artifactory
      repository(url: 'https://artifactory.wetransform.to/artifactory/libs-release-local') {
        authentication(userName: project.hasProperty('wetfArtifactoryUser') ? wetfArtifactoryUser : '',
          password: project.hasProperty('wetfArtifactoryPassword') ? wetfArtifactoryPassword : '')
      }
      snapshotRepository(url: 'https://artifactory.wetransform.to/artifactory/libs-snapshot-local') {
        authentication(userName: project.hasProperty('wetfArtifactoryUser') ? wetfArtifactoryUser : '',
          password: project.hasProperty('wetfArtifactoryPassword') ? wetfArtifactoryPassword : '')
      }

    }
  }
}

/*
 * Some general project configuration
 */

configurations.all {
  // ensure SNAPSHOTs are updated every time if needed
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

// Gradle wrapper
task wrapper(type: Wrapper) {
  gradleVersion = '4.9'
}
